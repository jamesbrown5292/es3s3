[{"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-governance/ClimateGovernanceBar.js":"1","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/data-helpers/chartHelpers.js":"2","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-opportunities/ClimateOpportunitiesBySector.js":"3","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/scope3-emissions/EmissionsData.js":"4","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/GraphsGrid.js":"5","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-targets/ClimateTargets.js":"6","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/CdpScore.js":"7","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/TcfdSignatories.js":"8","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/climate-reporting-data.js":"9"},{"size":5570,"mtime":1607314702210,"results":"10","hashOfConfig":"11"},{"size":1992,"mtime":1607310141368,"results":"12","hashOfConfig":"11"},{"size":5379,"mtime":1607314682345,"results":"13","hashOfConfig":"11"},{"size":5421,"mtime":1607319313029,"results":"14","hashOfConfig":"11"},{"size":2327,"mtime":1607314474858,"results":"15","hashOfConfig":"11"},{"size":10037,"mtime":1607316928999,"results":"16","hashOfConfig":"11"},{"size":9684,"mtime":1607318624075,"results":"17","hashOfConfig":"11"},{"size":3307,"mtime":1607319626462,"results":"18","hashOfConfig":"11"},{"size":4087,"mtime":1607319154943,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11o3hlq",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-governance/ClimateGovernanceBar.js",["41"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/data-helpers/chartHelpers.js",[],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-opportunities/ClimateOpportunitiesBySector.js",["42"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/scope3-emissions/EmissionsData.js",["43"],"import { ResponsiveBar } from '@nivo/bar'\nimport emissionsData from './scope3-emissions-data'\nimport { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport chartHelpers from \"../data-helpers/chartHelpers.js\"\n\nconst EmissionsData = () => {\n    const [state, setState] = useState({})\n    \n    useEffect(() => {\n        axios.get('https://r4vd6siai0.execute-api.us-east-1.amazonaws.com/prod')\n          .then((res) => {\n          setState(res.data);\n          });\n      }, []);\n    \n\n    const data =  emissionsData.emissionsData.barData;\n\n    const columnHeadersLookup = {\n        company: \"company\",\n        industry: \"industry\",\n        scope3_emissions: \"1_does_the_company_disclose_scope_3_emissions_outside_of_cdp\"\n    };\n\n    const buildChart = () => {\n        if (state.ResultSet) {\n            const oilGasScope3Yes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasScope3No = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPScope3Yes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPScope3No = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n\n                return [\n                    {\n                      indicator: 'Yes',\n                      'Oil & Gas': oilGasScope3Yes,\n                      'Electric Utility & Power Generators': EUPScope3Yes\n                    },\n                    {\n                      indicator: 'No',\n                      'Oil & Gas': oilGasScope3No,\n                      'Electric Utility & Power Generators': EUPScope3No\n                    }\n                  ]\n        }\n    }\n\n    const APIdata = buildChart()\n    if (APIdata) {\n        return (\n            <div className=\"graph-container\" style={{ width: 550, height: 450, marginLeft: 100, marginTop: 56, marginRight: -150}}>\n                <h5>Do companies disclose Scope 3 emissions outside of CDP? By sector.</h5>\n                <ResponsiveBar\n                    data={APIdata}\n                    height={350}\n                    width={550}\n                    keys={[ 'Oil & Gas', 'Electric Utility & Power Generators']}\n                    indexBy=\"indicator\"\n                    margin={{ top: 45, right:150, bottom: 50, left: 100 }}\n                    padding={0.4}\n                    valueScale={{ type: 'linear' }}\n                    indexScale={{ type: 'band', round: true }}\n                    colors={{ scheme: 'category10' }}\n                    borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    borderRadius={15}\n                    enableGridY={false}\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        tickSize: 6,\n                        tickPadding: 10,\n                        tickRotation: 0,\n                        legend: 'Industry',\n                        legendPosition: 'middle',\n                        legendOffset: 40\n                    }}\n                    axisLeft={{\n                        tickSize: 10,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Number of companies',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    legends={[\n                        {\n                            dataFrom: 'keys',\n                            anchor: 'top-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 60,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemWidth: 100,\n                            itemHeight: 60,\n                            itemDirection: 'left-to-right',\n                            itemOpacity: 0.85,\n                            symbolSize: 20,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={true}\n                    motionStiffness={90}\n                    motionDamping={15}\n                />\n            </div>\n        )\n    }\n    return null;\n};\n\nexport default EmissionsData","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/GraphsGrid.js",["44","45","46"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-targets/ClimateTargets.js",["47"],"import { ResponsiveBar } from '@nivo/bar'\nimport climateTargetsData from './climate-targets-data'\nimport { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport chartHelpers from \"../data-helpers/chartHelpers.js\"\n\n\nconst ClimateTargets = () => {\n    const [state, setState] = useState({});\n\n    useEffect(() => {\n        axios.get('https://38podzd2x6.execute-api.us-east-1.amazonaws.com/prod')\n          .then((res) => {\n          setState(res.data);\n          });\n      }, []);\n\n    const columnHeadersLookup = {\n        company: \"company\",\n        industry: \"industry\",\n        disclose_targets: \"1_does_the_company_have_publicly_disclosed_climate_targets\",\n        net_zero: \"1_7_is_the_climate_target_net_zero\",\n        science_based: \"1_8_is_the_climate_target_science_based\",\n        support_science_based: \"2_is_the_company_an_official_supporter_of_science-based_targets_and_if_so_where_are_they_in_their_journey\"\n    };\n\n    const buildChart = () => {\n        if (state.ResultSet) {\n            const oilGasTargetsYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['disclose_targets'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasTargetsNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['disclose_targets'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPTargetsYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['disclose_targets'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPTargetsNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['disclose_targets'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n            \n            const oilGasNetZeroYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup[\"net_zero\"],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasNetZeroNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup[\"net_zero\"],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPNetZeroYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup[\"net_zero\"],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPNetZeroNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup[\"net_zero\"],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n            \n            const oilGasScienceBasedYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['science_based'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasScienceBasedNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['science_based'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPScienceBasedYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['science_based'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPScienceBasedNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['science_based'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n            \n            const oilGasSupportScienceBasedYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['support_science_based'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasSupportScienceBasedNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['support_science_based'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPSupportScienceBasedYes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['support_science_based'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPSupportScienceBasedNo = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['support_science_based'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n\n                return [\n                    {\n                      indicator: 'Publish targets',\n                      'Oil & Gas - Yes': oilGasTargetsYes,\n                      'Oil & Gas - No': oilGasTargetsNo,\n                      'Electric Utility & Power Generators - Yes': EUPTargetsYes,\n                      'Electric Utility & Power Generators - No': EUPTargetsNo\n                    },\n                    {\n                      indicator: 'Target is net 0',\n                      'Oil & Gas - Yes': oilGasNetZeroYes,\n                      'Oil & Gas - No': oilGasNetZeroNo,\n                      'Electric Utility & Power Generators - Yes': EUPNetZeroYes,\n                      'Electric Utility & Power Generators - No': EUPNetZeroNo\n                    },\n                    {\n                      indicator: 'Science-based target',\n                      'Oil & Gas - Yes': oilGasScienceBasedYes,\n                      'Oil & Gas - No': oilGasScienceBasedNo,\n                      'Electric Utility & Power Generators - Yes': EUPScienceBasedYes,\n                      'Electric Utility & Power Generators - No': EUPScienceBasedNo\n                    },\n                    {\n                      indicator: 'Support science-based targets',\n                      'Oil & Gas - Yes': oilGasSupportScienceBasedYes,\n                      'Oil & Gas - No': oilGasSupportScienceBasedNo,\n                      'Electric Utility & Power Generators - Yes': EUPSupportScienceBasedYes,\n                      'Electric Utility & Power Generators - No': EUPSupportScienceBasedNo\n                    },\n                  ]\n        }\n    }\n\n    const APIdata = buildChart();\n\n    if (APIdata){\n        return (\n            <div className=\"graph-container  page-left\" style={{ width: 800, height: 450, marginTop: '4em'}}>\n                <h5>Companies' publicly disclosed climate targets. Comparison by sector.</h5>\n                <ResponsiveBar\n                    data={APIdata}\n                    width={650}\n                    height={400}\n                    keys={[ 'Oil & Gas - Yes', 'Oil & Gas - No', 'Electric Utility & Power Generators - Yes', 'Electric Utility & Power Generators - No']}\n                    indexBy=\"indicator\"\n                    margin={{ top: 30, right: 0, bottom: 100, left: 60 }}\n                    padding={0.6}\n                    valueScale={{ type: 'linear' }}\n                    indexScale={{ type: 'band', round: true }}\n                    colors={{ scheme: 'paired' }}\n                    borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    borderRadius={10}\n                    enableGridY={false}\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        tickSize: 6,\n                        tickPadding: 10,\n                        tickRotation: 0,\n                        legend: 'Targets',\n                        legendPosition: 'middle',\n                        legendOffset: 40\n                    }}\n                    axisLeft={{\n                        tickSize: 10,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Number of companies',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    legends={[\n                        {\n                            dataFrom: 'keys',\n                            anchor: 'top-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 30,\n                            translateY: 50,\n                            itemsSpacing: 0,\n                            itemWidth: 100,\n                            itemHeight: 60,\n                            itemDirection: 'left-to-right',\n                            itemOpacity: 0.85,\n                            symbolSize: 20,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={true}\n                    motionStiffness={90}\n                    motionDamping={15}\n                />\n            </div>\n        )\n    }\n    return null;\n};\n\nexport default ClimateTargets","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/CdpScore.js",["48"],"import { ResponsiveBar } from '@nivo/bar'\nimport climateReportingData from './climate-reporting-data'\nimport { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport chartHelpers from \"../data-helpers/chartHelpers.js\"\n\n\nconst CdpScore = () => {\n    const [state, setState] = useState({})\n\n    useEffect(() => {\n        axios.get('https://l4etjxi6wc.execute-api.us-east-1.amazonaws.com/prod')\n          .then((res) => {\n          setState(res.data);\n          });\n      }, []);\n\n    const columnHeadersLookup = {\n        company: \"company\",\n        industry: \"industry\",\n        cdp_score: \"1_1_if_yes_what_is_their_most_recent_cdp_climate_score_(a/a-/b/b-/c/c-/d/d-/f/n/a)\"\n    };\n\n\n    const buildChart = () => {\n        if (state.ResultSet) {\n            const oilGasA = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'A',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasAMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'A-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPA = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'A',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPAMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'A-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n         \n            const oilGasB = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'B',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasBMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'B-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPB = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'B',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPBMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'B-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n         \n            const oilGasC = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'C',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasCMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'C-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPC = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'C',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPCMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'C-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n         \n            const oilGasD = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'D',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasDMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'D-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPD = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'D',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPDMinus = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'D-',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n         \n            const oilGasF = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'F',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPF = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'F',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n       \n            const oilGasNa = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'N/A',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPNa = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['cdp_score'],\n                'N/A',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n       \n\n                return [\n                    {\n                      indicator: 'Oil & Gas',\n                      'A': oilGasA,\n                      'A-': oilGasAMinus,\n                      'B': oilGasB,\n                      'B-': oilGasBMinus,\n                      'C': oilGasC,\n                      'C-': oilGasCMinus,\n                      'D': oilGasD,\n                      'D-': oilGasDMinus,\n                      'F': oilGasF,\n                      'N/A': oilGasNa,\n                    },\n                    {\n                      indicator: 'Electric Utility & Power Generators',\n                      'A': EUPA,\n                      'A-': EUPAMinus,\n                      'B': EUPB,\n                      'B-': EUPBMinus,\n                      'C': EUPC,\n                      'C-': EUPCMinus,\n                      'D': EUPD,\n                      'D-': EUPDMinus,\n                      'F': EUPF,\n                      'N/A': EUPNa,\n                    },\n                   \n                  ]\n        }\n    }\n\n    const APIdata = buildChart()\n\n    const data = climateReportingData.cdpScore\n    if (APIdata) {\n    return (\n        <div className=\"graph-container\" style={{ width: 500, height: 450, marginLeft: 110}}>\n            <h5>Sector comparison of CDP scores</h5>        \n            <ResponsiveBar\n                data={APIdata}\n                height={400}\n                width={400}\n                keys={[ 'A', 'A-', 'B', 'B-', 'C', 'C-', 'D', 'D-', 'F', 'N/A']}\n                indexBy=\"indicator\"\n                margin={{ top: 50, right: 0, bottom: 50, left: 30 }}\n                padding={0.6}\n                valueScale={{ type: 'linear' }}\n                indexScale={{ type: 'band', round: true }}\n                colors={{ scheme: 'yellow_orange_red' }}\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                borderRadius={15}\n                enableGridY={false}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 6,\n                    tickPadding: 10,\n                    tickRotation: 0,\n                    legend: 'Industry',\n                    legendPosition: 'middle',\n                    legendOffset: 40\n                }}\n                axisLeft={{\n                    tickSize: 10,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Number of companies',\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                legends={[\n                    {\n                        dataFrom: 'keys',\n                        anchor: 'bottom-right',\n                        direction: 'column',\n                        justify: false,\n                        translateX: 60,\n                        translateY: 0,\n                        itemsSpacing: -30,\n                        itemWidth: 100,\n                        itemHeight: 60,\n                        itemDirection: 'left-to-right',\n                        itemOpacity: 0.85,\n                        symbolSize: 20,\n                        effects: [\n                            {\n                                on: 'hover',\n                                style: {\n                                    itemOpacity: 1\n                                }\n                            }\n                        ]\n                    }\n                ]}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n        )\n    }\n\n    return null;\n\n};\n\nexport default CdpScore","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/TcfdSignatories.js",["49"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-reporting/climate-reporting-data.js",[],{"ruleId":"50","severity":1,"message":"51","line":98,"column":9,"nodeType":"52","messageId":"53","endLine":98,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":68,"column":11,"nodeType":"52","messageId":"53","endLine":68,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":18,"column":11,"nodeType":"52","messageId":"53","endLine":18,"endColumn":15},{"ruleId":"50","severity":1,"message":"54","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":26},{"ruleId":"50","severity":1,"message":"55","line":2,"column":16,"nodeType":"52","messageId":"53","endLine":2,"endColumn":21},{"ruleId":"50","severity":1,"message":"56","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":13},{"ruleId":"50","severity":1,"message":"57","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":168,"column":11,"nodeType":"52","messageId":"53","endLine":168,"endColumn":15},{"ruleId":"50","severity":1,"message":"58","line":78,"column":7,"nodeType":"52","messageId":"53","endLine":78,"endColumn":15},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Image' is defined but never used.","'axios' is defined but never used.","'climateTargetsData' is defined but never used.","'tcfdData' is assigned a value but never used."]