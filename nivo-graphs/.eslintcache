[{"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-governance/ClimateGovernanceBar.js":"1","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/data-helpers/chartHelpers.js":"2","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-opportunities/ClimateOpportunitiesBySector.js":"3","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/scope3-emissions/EmissionsData.js":"4","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/GraphsGrid.js":"5"},{"size":5570,"mtime":1607314702210,"results":"6","hashOfConfig":"7"},{"size":1992,"mtime":1607310141368,"results":"8","hashOfConfig":"7"},{"size":5379,"mtime":1607314682345,"results":"9","hashOfConfig":"7"},{"size":5423,"mtime":1607315440819,"results":"10","hashOfConfig":"7"},{"size":2327,"mtime":1607314474858,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11o3hlq",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-governance/ClimateGovernanceBar.js",["23"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/data-helpers/chartHelpers.js",[],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/climate-opportunities/ClimateOpportunitiesBySector.js",["24"],"/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/scope3-emissions/EmissionsData.js",["25"],"import { ResponsiveBar } from '@nivo/bar'\nimport emissionsData from './scope3-emissions-data'\nimport { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport chartHelpers from \"../data-helpers/chartHelpers.js\"\n\nconst EmissionsData = () => {\n    const [state, setState] = useState({})\n    \n    useEffect(() => {\n        axios.get('https://r4vd6siai0.execute-api.us-east-1.amazonaws.com/prod')\n          .then((res) => {\n          setState(res.data);\n          });\n      }, []);\n    \n\n    const data =  emissionsData.emissionsData.barData;\n\n    const columnHeadersLookup = {\n        company: \"company\",\n        industry: \"industry\",\n        scope3_emissions: \"1_does_the_company_disclose_scope_3_emissions_outside_of_cdp\"\n    };\n\n      const buildChart = () => {\n        if (state.ResultSet) {\n            const oilGasScope3Yes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const oilGasScope3No = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Oil & Gas')\n            const EUPScope3Yes = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'Yes',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')\n            const EUPScope3No = chartHelpers.countResponsesByFilter(\n                columnHeadersLookup['scope3_emissions'],\n                'No',\n                state.ResultSet.Rows,\n                columnHeadersLookup['industry'], 'Electric Utility & Power Generators')      \n\n                return [\n                    {\n                      indicator: 'Yes',\n                      'Oil & Gas': oilGasScope3Yes,\n                      'Electric Utility & Power Generators': EUPScope3Yes\n                    },\n                    {\n                      indicator: 'No',\n                      'Oil & Gas': oilGasScope3No,\n                      'Electric Utility & Power Generators': EUPScope3No\n                    }\n                  ]\n        }\n    }\n\n    const APIdata = buildChart()\n    if (APIdata) {\n        return (\n            <div className=\"graph-container\" style={{ width: 550, height: 450, marginLeft: 100, marginTop: 56, marginRight: -150}}>\n                <h5>Do companies disclose Scope 3 emissions outside of CDP? By sector.</h5>\n                <ResponsiveBar\n                    data={APIdata}\n                    height={350}\n                    width={550}\n                    keys={[ 'Oil & Gas', 'Electric Utility & Power Generators']}\n                    indexBy=\"indicator\"\n                    margin={{ top: 45, right:150, bottom: 50, left: 100 }}\n                    padding={0.4}\n                    valueScale={{ type: 'linear' }}\n                    indexScale={{ type: 'band', round: true }}\n                    colors={{ scheme: 'category10' }}\n                    borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    borderRadius={15}\n                    enableGridY={false}\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        tickSize: 6,\n                        tickPadding: 10,\n                        tickRotation: 0,\n                        legend: 'Industry',\n                        legendPosition: 'middle',\n                        legendOffset: 40\n                    }}\n                    axisLeft={{\n                        tickSize: 10,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Number of companies',\n                        legendPosition: 'middle',\n                        legendOffset: -40\n                    }}\n                    labelSkipWidth={12}\n                    labelSkipHeight={12}\n                    labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                    legends={[\n                        {\n                            dataFrom: 'keys',\n                            anchor: 'top-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 60,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemWidth: 100,\n                            itemHeight: 60,\n                            itemDirection: 'left-to-right',\n                            itemOpacity: 0.85,\n                            symbolSize: 20,\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={true}\n                    motionStiffness={90}\n                    motionDamping={15}\n                />\n            </div>\n        )\n    }\n    return null;\n};\n\nexport default EmissionsData","/Users/jamesbrown/nlp/es3s3/nivo-graphs/src/GraphsGrid.js",["26","27","28"],{"ruleId":"29","severity":1,"message":"30","line":98,"column":9,"nodeType":"31","messageId":"32","endLine":98,"endColumn":13},{"ruleId":"29","severity":1,"message":"30","line":68,"column":11,"nodeType":"31","messageId":"32","endLine":68,"endColumn":15},{"ruleId":"29","severity":1,"message":"30","line":18,"column":11,"nodeType":"31","messageId":"32","endLine":18,"endColumn":15},{"ruleId":"29","severity":1,"message":"33","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":26},{"ruleId":"29","severity":1,"message":"34","line":2,"column":16,"nodeType":"31","messageId":"32","endLine":2,"endColumn":21},{"ruleId":"29","severity":1,"message":"35","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":13},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Image' is defined but never used.","'axios' is defined but never used."]